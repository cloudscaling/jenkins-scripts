#!/bin/bash

function wait_absence_status_for_services() {
  sleep 10
  check_str=$1
  local max_iter=${2:-30}
  # waiting for services
  local iter=0
  while juju status | grep -P $check_str &>/dev/null
  do
    echo "Waiting for all service to be active - $iter/$max_iter"
    if ((iter >= max_iter)); then
      echo "ERROR: Services didn't up."
      juju status
      return 1
    fi
    if juju status | grep "current" | grep error ; then
      echo "ERROR: Some services went to error state"
      juju status
      return 1
    fi
    sleep 30
    ((++iter))
  done
}

function wait_for_removed() {
  sleep 10
  check_str=$1
  local max_iter=${2:-5}
  # waiting for services
  local iter=0
  while juju status | grep "$check_str/" &>/dev/null
  do
    echo "Waiting for all units to be removed - $iter/$max_iter"
    if ((iter >= max_iter)); then
      echo "ERROR: Units didn't removed."
      juju status
      return 1
    fi
    if juju status | grep "current" | grep error ; then
      echo "ERROR: Some services went to error state"
      juju status
      return 1
    fi
    sleep 30
    ((++iter))
  done
}

function get_mdm_machines() {
  juju status scaleio-mdm --format json | jq .machines | jq keys | tail -n +2 | head -n -1 | sed -e "s/[\",]//g"
}

function get_master_mdm() {
  get_mdms=${1:-get_mdm_machines}
  master_mdm=''
  for mch in `$get_mdms` ; do
    if juju ssh $mch sudo scli --query_cluster --approve_certificate 2>/dev/null 1>/dev/null ; then
      echo "$mch"
      return
    fi
  done
  return 1
}

function get_cluster_mode() {
  juju get scaleio-mdm | grep -A 5 cluster-mode | grep "value:" | head -1 | awk '{print $2}'
}

function wait_for_machines() {
  # wait for machines
  sleep 30
  for machine in $@ ; do
    echo "Waiting for machine: $machine"
    local fail=0
    while ! output=`juju ssh $machine "sudo apt-get install -fy joe" 2>/dev/null` ; do
      if ((fail >= 12)); then
        echo "ERROR: Machine $machine did not up."
        echo $output
        exit 1
      fi
      sleep 10
      ((++fail))
    done
    juju ssh $machine uname -a 2>/dev/null
  done
}

function wait_status() {
  wait_absence_status_for_services "executing|blocked|waiting|allocating"

  # check for errors
  if juju status | grep "current" | grep error >/dev/null ; then
    echo "ERROR: Some services went to error state"
    juju ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
    echo "---------------------------------------------------------------------------"
    juju status
    echo "---------------------------------------------------------------------------"
    return 2
  fi
}

function create_machine() {
  is_compute="$1" # 0 or 1
  sds_disks_count="$2" # how many disks SDS should have
  shift ; shift
  additional_constraints="$@"

  # general instance type
  instance_type="t2.medium"
  if [[ "$is_compute" != 0 ]] ; then
    # instance type for compute hosts
    instance_type="c4.large"
  fi

  disks=''
  if (( sds_disks_count > 0 )) ; then
    da=()
    for (( i=0; i<sds_disks_count; ++i)) ; do da=(${da[@]} ebs-ssd,100G) ; done
    disks="${da[@]}"

    juju machine add --constraints "$additional_constraints instance-type=$instance_type root-disk=40G" --disks "$disks" 2>&1 | awk '{print $3}'
  else
    juju machine add --constraints "$additional_constraints instance-type=$instance_type root-disk=40G" 2>&1 | awk '{print $3}'
  fi
}
