#!/bin/bash

fmy_file="${BASH_SOURCE[0]}"
fmy_dir="$(dirname $fmy_file)"
jver="$(juju --version | cut -d . -f 1)"
source $fmy_dir/functions-juju$jver

function wait_absence_status_for_services() {
  sleep 10
  check_str=$1
  local max_iter=${2:-30}
  # waiting for services
  local iter=0
  while juju-status | grep -P $check_str &>/dev/null
  do
    echo "Waiting for all service to be active - $iter/$max_iter"
    if ((iter >= max_iter)); then
      echo "ERROR: Services didn't up."
      juju-status-tabular
      return 1
    fi
    if juju-status | grep "current" | grep error ; then
      echo "ERROR: Some services went to error state"
      juju-status-tabular
      return 1
    fi
    sleep 30
    ((++iter))
  done
}

function wait_for_removed() {
  sleep 10
  check_str=$1
  local max_iter=${2:-5}
  # waiting for services
  local iter=0
  while juju-status | grep "$check_str/" &>/dev/null
  do
    echo "Waiting for all units to be removed - $iter/$max_iter"
    if ((iter >= max_iter)); then
      echo "ERROR: Units didn't removed."
      juju-status-tabular
      return 1
    fi
    if juju-status | grep "current" | grep error ; then
      echo "ERROR: Some services went to error state"
      juju-status-tabular
      return 1
    fi
    sleep 30
    ((++iter))
  done
}

function get_mdm_machines() {
  juju-status-json scaleio-mdm | jq .machines | jq keys | tail -n +2 | head -n -1 | sed -e "s/[\",]//g"
}

function get_master_mdm() {
  # $1 - this is a COMMAND/FUNCTION to get list of machines to check
  get_mdms=${1:-get_mdm_machines}
  master_mdm=''
  for mch in `$get_mdms` ; do
    if juju-ssh $mch sudo scli --query_cluster --approve_certificate 2>/dev/null 1>/dev/null ; then
      echo "$mch"
      return
    fi
  done
  return 1
}

function wait_for_machines() {
  # wait for machines
  sleep 30
  for machine in $@ ; do
    echo "Waiting for machine: $machine"
    local fail=0
    while ! output=`juju-ssh $machine "sudo apt-get install -fy joe" 2>/dev/null` ; do
      if ((fail >= 60)); then
        echo "ERROR: Machine $machine did not up."
        echo $output
        exit 1
      fi
      sleep 10
      ((++fail))
    done
    juju-ssh $machine uname -a 2>/dev/null
  done
}

function wait_status() {
  wait_absence_status_for_services "executing|blocked|waiting|allocating"

  # check for errors
  if juju-status | grep "current" | grep -q error ; then
    echo "ERROR: Some services went to error state"
    juju-ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
    echo "---------------------------------------------------------------------------"
    juju-status-tabular
    echo "---------------------------------------------------------------------------"
    return 2
  fi
}

function create_machine() {
  # 0: general machine for parameters testing
  # 1: compute machine for OpenStack
  # 2: machine for MDM/SDS + OpenStack services
  local type="$1"
  local sds_disks_count="$2" # how many disks SDS should have
  shift ; shift
  local additional_constraints="$@"

  case "$type" in
  "0")
    local instance_type="t2.medium"
    ;;
  "1")
    local instance_type="c4.large"
    ;;
  "2")
    local instance_type="r3.large"
    ;;
  *)
    return 1
    ;;
  esac

  local az_opts=""
  if [ -n "$AZ" ] ; then
    az_opts="zone=$AZ"
  fi

  local disks=''
  if (( sds_disks_count > 0 )) ; then
    da=()
    for (( i=0; i<sds_disks_count; ++i )) ; do da=(${da[@]-} ebs-ssd,100G) ; done
    disks="${da[@]}"

    juju-add-machine $az_opts --constraints "$additional_constraints instance-type=$instance_type root-disk=40G" --disks "$disks" 2>&1 | tail -1 | awk '{print $3}'
  else
    juju-add-machine $az_opts --constraints "$additional_constraints instance-type=$instance_type root-disk=40G" 2>&1 | tail -1 | awk '{print $3}'
  fi
  # NOTE: 'tail -1' is needed here for enabled debug mode. in this mode there are several lines in output but we need only last.
}

function apply_developing_puppets() {
  if [[ "${PUPPET_DEV_MODE:-false}" != true ]] ; then
    return
  fi
  local puppet4=${PUPPET4:-false}
  local logf="$WORKSPACE/logs/apt.log"
  for mch in $@ ; do
    echo "INFO: install development puppets to machine $mch (puppet4 = $puppet4)" | tee -a $logf
    juju-ssh $mch "sudo apt-get -qy update && sudo apt-get -qfy upgrade && sudo apt-get -qqfy purge puppet ruby facter" &>>$logf
    if [[ "$puppet4" == true ]] ; then
      juju-ssh $mch "sudo apt-get -qqfy install git ruby" &>>$logf
      juju-ssh $mch "sudo gem install puppet" &>>$logf
      juju-ssh $mch "sudo git clone -q https://github.com/codedellemc/puppet-scaleio /etc/puppetlabs/code/modules/scaleio" 2>/dev/null
      juju-ssh $mch "sudo git clone -q https://github.com/codedellemc/puppet-scaleio-openstack /etc/puppetlabs/code/modules/scaleio_openstack" 2>/dev/null
    else
      juju-ssh $mch "sudo apt-get -qqfy install git puppet" &>>$logf
      juju-ssh $mch "sudo git clone -q https://github.com/codedellemc/puppet-scaleio /etc/puppet/modules/scaleio" 2>/dev/null
      juju-ssh $mch "sudo git clone -q https://github.com/codedellemc/puppet-scaleio-openstack /etc/puppet/modules/scaleio_openstack" 2>/dev/null
    fi
    for dep in puppetlabs-firewall puppetlabs-stdlib puppetlabs-inifile ; do
      juju-ssh $mch "sudo puppet module install $dep" &>>$logf
    done
  done
}

# -------------------------- fix scini/xcache problems
function check_kernel() {
  local machine=$1

  kernel=`juju-ssh $machine "uname -r" 2>/dev/null`
  kernel=`echo $kernel | sed 's/\r//'`

  rm -f index.html
  wget -t 2 -T 30 -q "--ftp-user=QNzgdxXix" "--ftp-password=Aw3wFAwAq3" ftp://ftp.emc.com/Ubuntu/2.0.11000.174/
  if grep -q $kernel index.html ; then
    rm -f index.html
    wget -t 2 -T 30 -q "--ftp-user=QNzgdxXix" "--ftp-password=Aw3wFAwAq3" ftp://ftp.emc.com/Ubuntu/2.0.11000.174/${kernel}/
    if grep -q 'scini.tar' index.html && grep -q 'xcache.tar' index.html  ; then
      rm -f index.html
      return 0
    fi
  fi
  rm -f index.html
  return 1
}

function upgrade_kernel() {
  local machine=$1

  local logf="$WORKSPACE/logs/apt.log"
  echo "WARNING: driver for kernel $kernel not found on ftp.emc.com. Upgrade kernel to 4.2.0-30" | tee -a $logf
  juju-ssh $machine "sudo apt-get install -fqy linux-image-4.2.0-30-generic linux-headers-4.2.0-30-generic" 2>/dev/null >>$logf
  juju-ssh $machine "sudo reboot" 2>/dev/null >>$logf
}

function fix_kernel_drivers() {
  local updated_machines=""
  for machine in $@ ; do
    echo "INFO: check machine $machine"
    if ! check_kernel $machine ; then
      upgrade_kernel $machine
      updated_machines="$updated_machines $machine"
    else
      echo "INFO: driver for kernel $kernel found on ftp.emc.com"
    fi
  done

  if [[ -n "$updated_machines" ]] ; then
    wait_for_machines $updates_machines
  fi
}

function cleanup_environment() {
  if juju-destroy-environment ; then
    return 0
  fi

  # sometime Juju couldn't delete amazon environment and volumes - try to do it manually
  juju-destroy-environment || /bin/true
  for volid in `aws ec2 describe-volumes --filters Name=tag-value,Values="juju-amazon-volume*" Name=status,Values=available --query 'Volumes[*].{ID:VolumeId}' --output text` ; do
    aws ec2 delete-volume --volume-id "$volid"
    sleep 3
  done
}

function create_eth1() {
  node=$1

  echo "INFO: creating additional network interface on node: $node"
  juju-ssh $node "sudo apt-get -fy install uml-utilities >/dev/null ; sudo ip tuntap add dev eth1 mode tap ; sudo ip link set dev eth1 up ; ifconfig" 2>/dev/null
}

function create_stackrc() {
  auth_ip=`get_machine_ip keystone`
  echo "export OS_AUTH_URL=http://$auth_ip:5000/v2.0" > $WORKSPACE/stackrc
  echo "export OS_USERNAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_TENANT_NAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_PROJECT_NAME=admin" >> $WORKSPACE/stackrc
  echo "export OS_PASSWORD=password" >> $WORKSPACE/stackrc
}
