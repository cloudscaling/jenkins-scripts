#!/bin/bash

MAX_FAIL=30

instance_status() { nova show $1 | awk '/ status / {print $4}'; }
function volume_status() { cinder show $1 | awk '/ status / {print $4}'; }
function snapshot_status() { cinder snapshot-show $1 | awk '/ status / {print $4}'; }
function image_status() { openstack image show $1 | awk '/ status / {print $4}'; }

function wait_instance() {
  local instance_id=$1
  local max_fail=$2
  local wait_status=${3:-ACTIVE}
  echo "INFO: Wait for status '$wait_status' of instance '$instance_id'"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Instance status wait timeout occured" >> errors
      nova show $instance_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(instance_status $instance_id)
    if [[ "$status" == "$wait_status" ]]; then
      break
    fi
    if [[ "$status" == "ERROR" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Instance booting error' >> errors
      nova show $instance_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function wait_volume() {
  local volume_id=$1
  local max_fail=$2
  echo "INFO: Wait for volume: $volume_id"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Volume creation fails (timeout)" >> errors
      cinder show $volume_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(volume_status $volume_id)
    if [[ $status == "available" ]]; then
      break
    fi
    if [[ $status == "error" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Volume creation error' >> errors
      cinder show $volume_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function wait_snapshot() {
  local snapshot_id=$1
  local max_fail=$2
  echo "INFO: Wait for snapshot: $volume_id"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Snapshot creation fails (timeout)" >> errors
      cinder snapshot-show $snapshot_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(snapshot_status $snapshot_id)
    if [[ $status == "available" ]]; then
      break
    fi
    if [[ $status == "error" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Snapshot creation error' >> errors
      cinder snapshot-show $snapshot_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function wait_image() {
  local image_id=$1
  local max_fail=$2
  local wait_status=$3
  echo "INFO: Wait for image: $image_id"
  local fail=0
  local timeout=10
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Image status wait timeout occured" >> errors
      openstack image show $image_id >> errors
      return 1
    fi
    echo "attempt $fail of $max_fail"
    status=$(image_status $image_id)
    if [[ "$status" == "$wait_status" || "$status" == 'active' ]]; then
      break
    fi
    if [[ "$status" == "error" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Image creation error' >> errors
      openstack image show $image_id >> errors
      return 1
    fi
    sleep $timeout
    ((timeout+=5))
    ((++fail))
  done
}

function activate_venv() {
  if [ -d .venv ]; then
    source .venv/bin/activate
  fi
}

function deactivate_venv() {
  if [ -d .venv ]; then
    deactivate
  fi
}

function create_virtualenv() {
  rm -rf .venv
  virtualenv .venv
  source .venv/bin/activate
  pip install -q "python-openstackclient<3.0.0" 2>/dev/null
  deactivate
}

function create_image() {
  image_name=${1:-cirros}

  activate_venv

  if ! output=`openstack image show $image_name 2>/dev/null` ; then
    rm -f cirros-0.3.4-x86_64-disk.img
    wget -t 2 -T 60 -q http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
    if ! output=`openstack image create --public --file cirros-0.3.4-x86_64-disk.img $image_name` ; then
      return 1
    fi
  fi
  image_id=`echo "$output" | awk '/ id /{print $4}'`

  deactivate_venv
  echo $image_id
}

function create_flavors() {
  activate_venv

  if ! nova flavor-show 51 &>/dev/null ; then
    nova flavor-create fl8gb 51 512 8 1 >/dev/null
  fi
  if ! nova flavor-show 52 &>/dev/null ; then
    nova flavor-create fl16gb 52 512 16 1 >/dev/null
  fi
  if ! nova flavor-show 53 &>/dev/null ; then
    nova flavor-create fl8gbext --ephemeral 8 --swap 8192 53 512 8 1 >/dev/null
  fi

  deactivate_venv
}

function create_network() {
  activate_venv

  if ! nova network-show private &>/dev/null ; then
    nova network-create --fixed-range-v4 10.0.0.0/24 --gateway 10.0.0.1 --bridge br100 private
  fi

  deactivate_venv
}

function run_os_checks() {
  exec_on_mdm_callback=$1
  get_provisioning_type_callback=$2

  scli_password=${SCALEIO_mdm_password:-'Default_password'}
  if [ -n "${SCALEIO_mdm_ips}" ] ; then
    mdm_opts="--mdm_ip ${SCALEIO_mdm_ips}"
  else
    mdm_opts=""
  fi
  scli_login="scli ${mdm_opts} --login --username admin --password ${scli_password} --approve_certificate"
  scli_query="${scli_login} && scli ${mdm_opts}"

  pd_name=${SCALEIO_PROTECTION_DOMAIN:-'default_protection_domain'}

  # check installed cloud
  activate_venv

  echo "INFO: Check CLI versions:"
  set -x
  cinder --version
  nova --version
  openstack --version
  set +x

  echo "INFO: Check OpenStack catalog first"
  openstack catalog list || keystone catalog || /bin/true

  # in fuel env there is more than 1 network, so it's needed to specify network directly
  #   'net04 '              - fuel6.1/7.0
  #   'admin_internal_net'  - fuel8.0/9.0
  net_id=`nova network-list | awk '/net04 |admin_internal_net/{print $2}'`
  if [ -n "${net_id}" ] ; then
    nic_opts="--nic net-id=$net_id"
  else
    nic_opts=""
  fi
  deactivate_venv

  if ! image_id=`create_image` ; then
    return 1
  fi
  create_flavors
  # in case of fuel net-id is not emtpy, so skip network creation
  if [ -z "${net_id}" ] ; then
    create_network
  fi

  host_attr='OS-EXT-SRV-ATTR:host '

  # next checks will handle return code manually
  set +e

  activate_venv
  local ret=0
  check_cinder_simple_volume || ret=1
  echo ''
  check_cinder_bootable_volume || ret=1
  echo ''
  check_instance_simple || ret=1
  echo ''
  check_instance_ext || ret=1
  echo ''
  check_volume_snapshot || ret=1
  echo ''
  check_instance_snapshot || ret=1
  echo ''
  check_instance_resize || ret=1
  echo ''

  # here we try to list all infos from ScaleIO
  set -x
  $exec_on_mdm_callback "$scli_query --query_all_volume"
  $exec_on_mdm_callback "$scli_query --query_all_sds"
  $exec_on_mdm_callback "$scli_query --query_all_sdc"
  nova list
  cinder list
  set +x

  deactivate_venv

  return $ret
}

function _get_current_volume_ids() {
  $exec_on_mdm_callback "$scli_query --query_properties --object_type VOLUME --all_objects --properties ID" 2>/dev/null | sed $'s/\r//' | grep -v "Logged in" | awk '/ID/{print $2}'
}

function _get_volume_ids() {
  local ids_to_skip=$@
  local ids=`_get_current_volume_ids`
  for id in $ids ; do
    echo "$ids_to_skip" | grep -q "$id" && continue
    echo "$id"
  done
}

function _check_provisioning_type() {
  local type=$1
  shift
  local ids="$@"
  if [[ $type == '-' ]] ; then type=`$get_provisioning_type_callback` ; fi
  echo "INFO: Check that volumes in ScaleIO has type: $type"

  local ret=0
  for id in $ids ; do
    local output=`$exec_on_mdm_callback "$scli_query --query_properties --object_type VOLUME --object_id $id --properties ID,TYPE" 2>&1 | sed $'s/\r//'`
    if ! echo "$output" | grep -iq $type ; then
      echo "ERROR: Volume $id has another type:"
      echo "$output"
      ret=1
    else
      echo "INFO: Volume $id has correct type."
    fi
  done

  return $ret
}

function _check_size() {
  local size_mb=$1
  shift
  local ids="$@"
  echo "INFO: Check that volumes in ScaleIO has size: $size_mb MB"

  local ret=0
  for id in $ids ; do
    local output=`$exec_on_mdm_callback "$scli_query --query_properties --object_type VOLUME --object_id $id --properties ID,SIZE" 2>&1 | sed $'s/\r//'`
    if ! echo "$output" | grep -iq "$size_mb MB" ; then
      echo "ERROR: Volume $id has another size:"
      echo "$output"
      ret=1
    else
      echo "INFO: Volume $id has correct size"
    fi
  done

  return $ret
}

function check_cinder_simple_volume() {
  echo "INFO: Check simple volume"

  local volumes_before=`$exec_on_mdm_callback "$scli_query --query_all_volume" 2>&1`
  local volume_ids=`_get_volume_ids`

  if ! output=`cinder create --display-name simple_volume 1` ; then
    echo "ERROR: Couldn't create simple volume"
    echo "$output"
    return 1
  fi

  local ret=0
  local volume_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_volume $volume_id $MAX_FAIL ; then
    ret=1
    cinder show $volume_id
  else
    echo "INFO: Simple volume created successfully"
  fi

  echo "INFO: Check ScaleIO volume list"
  local volumes_after=`$exec_on_mdm_callback "$scli_query --query_all_volume" 2>&1`
  local vc1=`echo "$volumes_before" | grep "Volume ID" | wc -l`
  local vc2=`echo "$volumes_after" | grep "Volume ID" | wc -l`
  if (( vc2 != vc1 + 1 )) ; then
    echo "ERROR: Inconsistent count of volumes in ScaleIO"
    echo "ERROR: before test:"
    echo "$volumes_before"
    echo "ERROR: after test:"
    echo "$volumes_after"
    ret=1
  else
    echo "INFO: Success"
  fi

  local new_ids=`_get_volume_ids $volume_ids`
  _check_provisioning_type - $new_ids || ret=1
  _check_size 8192 $new_ids || ret=1

  echo "INFO: Volume information:"
  cinder show $volume_id
  cinder delete $volume_id >/dev/null
  return $ret
}

function check_cinder_bootable_volume() {
  echo "INFO: Check volume from image"
  if ! output=`cinder create --image-id $image_id --display-name volume_from_image 1` ; then
    echo "ERROR: Couldn't create volume from image"
    echo "$output"
    return 1
  fi

  local volume_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_volume $volume_id $MAX_FAIL ; then
    cinder show $volume_id
    cinder delete $volume_id >/dev/null
    return 1
  else
    echo "INFO: Volume from image created successfully"
  fi

  echo "INFO: Run instance from bootable volume"
  local iname='inst_from_volume'
  if ! output=`nova boot --flavor 51 $nic_opts --block-device "device=/dev/vda,id=$volume_id,shutdown=remove,source=volume,dest=volume,bootindex=0" $iname` ; then
    echo "ERROR: Couldn't boot instance from bootable volume"
    echo "$output"
    return 1
  fi

  local instance_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_instance $instance_id $MAX_FAIL ; then
    nova show $instance_id
    nova delete $instance_id >/dev/null
    return 1
  fi

  local ret=0
  _check_instance_log $instance_id || ret=1
  _check_instance_migration $instance_id || ret=1

  echo "INFO: Instance information:"
  nova show $instance_id
  nova delete $instance_id >/dev/null
  return $ret
}

function check_instance_simple() {
  echo "INFO: Check instance with simple flavor"
  _check_instance 51
  return $?
}

function check_instance_ext() {
  echo "INFO: Check instance with additional Ephemeral and swap"
  _check_instance 53
  return $?
}

function _check_instance_log() {
  local id=$1
  # wait for console-log
  echo "INFO: Check that console log is not empty"
  sleep 10
  local log_lines=`nova console-log $id | wc -l`
  if (( log_lines == 0 )) ; then
    echo "ERROR: console log is empty for instance $instance_id"
    return 1
  fi
  return 0
}

function _check_instance_migration() {
  local id=$1
  local host1=`nova show $id | grep "$host_attr" | awk '{print $4}'`
  echo "INFO: Check live migration and check that host changing (Host is $host1)"
  nova live-migration $id
  sleep 20
  if ! wait_instance $id $MAX_FAIL ; then
    return 1
  fi

  local host2=`nova show $id | grep "$host_attr" | awk '{print $4}'`
  if [[ "$host1" == "$host2" ]] ; then
    echo "ERROR: Host was not changed after live migration."
    return 1
  fi

  return 0
}

function _check_instance() {
  local flavor=$1

  local volume_ids=`_get_volume_ids`

  local iname="instance_$flavor"
  if ! output=`nova boot --flavor $flavor $nic_opts --image cirros $iname` ; then
    echo "ERROR: Couldn't boot instance"
    echo "$output"
    return 1
  fi
  local instance_id=`echo "$output" | awk '/ id /{print $4}'`
  local ret=0
  wait_instance $instance_id $((3*MAX_FAIL)) || ret=1
  if [[ $ret == 0 ]] ; then
    _check_instance_log $instance_id || ret=1
    _check_instance_migration $instance_id || ret=1
    local new_ids=`_get_volume_ids $volume_ids`
    _check_provisioning_type - $new_ids || ret=1
    _check_size 8192 $new_ids || ret=1 # this function is called with flavors 51 and 53. both have all disks sizes equal to 8Gb
  fi

  nova show $instance_id
  nova delete $instance_id
  return $ret
}

function check_volume_snapshot() {
  echo "INFO: Check snapshot creation from volume and volume from snapshot"

  local volume_ids=`_get_volume_ids`
  echo "INFO: Create simple volume"
  if ! output=`cinder create --display-name volume_for_snapshot 1` ; then
    echo "ERROR: Couldn't create volume"
    echo "$output"
    return 1
  fi
  local volume_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_volume $volume_id $MAX_FAIL ; then
    cinder show $volume_id
    cinder delete $volume_id >/dev/null
    return 1
  fi
  local scaleio_volume_id=`_get_volume_ids $volume_ids` # here should be only one volume!
  echo "INFO: Volume ($scaleio_volume_id) created successfully"

  echo "INFO: Create snapshot"
  if ! output=`cinder snapshot-create $volume_id` ; then
    echo "ERROR: Couldn't create snapshot"
    echo "$output"
    cinder delete $volume_id >/dev/null
    return 1
  fi
  local snapshot_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_snapshot $snapshot_id $MAX_FAIL ; then
    cinder snapshot-delete $snapshot_id >/dev/null
    sleep 5
    cinder delete $volume_id >/dev/null
    return 1
  fi
  echo "INFO: Snapshot created successfully"

  echo "INFO: Creating volume from snapshot"
  if ! output=`cinder create --snapshot-id $snapshot_id --display-name from_snapshot 8` ; then
    echo "ERROR: Couldn't create volume from snapshot"
    echo "$output"
    cinder snapshot-delete $snapshot_id >/dev/null
    sleep 5
    cinder delete $volume_id >/dev/null
    return 1
  fi  
  local snap_volume_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_volume $snap_volume_id $MAX_FAIL ; then
    cinder show $snap_volume_id
    cinder delete $snap_volume_id >/dev/null
    sleep 5
    cinder snapshot-delete $snapshot_id >/dev/null
    sleep 5
    cinder delete $volume_id >/dev/null
    return 1
  fi
  echo "INFO: Volume from snapshot created successfully"

  local ret=0
  _check_descendants $scaleio_volume_id 2 || ret=1

  cinder delete $snap_volume_id >/dev/null
  sleep 5
  cinder snapshot-delete $snapshot_id >/dev/null
  sleep 10
  if `cinder snapshot-list | grep $snapshot_id ` ; then
    echo "ERROR: Snapshot $snapshot_id wasn't deleted."
    ret=1
  fi

  cinder delete $volume_id >/dev/null

  return $ret
}

function _check_descendants() {
  local id=$1
  local exp_count=$2

  local query_str="--query_properties --object_type VOLUME --object_id $id --properties NUM_OF_DESCENDANT_VOLUMES"
  local output=`$exec_on_mdm_callback "$scli_query $query_str" 2>&1`
  local count=`echo "$output" | sed $'s/\r//' | awk '/NUM_OF_D/{print $2}'`
  if [[ $count != "$exp_count" ]] ; then
    echo "ERROR: Invalid count of descendant volumes for base volume $id (expected = $exp_count)."
    echo "$output"
    return 1
  fi
  echo "INFO: Correct count of descendant volumes for base volume $id ($exp_count)."
  return 0
}

function check_instance_snapshot() {
  echo "INFO: Check creation of snapshot from instance and second instance from the created image"

  local volume_ids=`_get_volume_ids`
  echo "INFO: Create instance"
  local iname="instance_for_snapshot"
  if ! output=`nova boot --flavor 51 $nic_opts --image cirros $iname` ; then
    echo "ERROR: Couldn't boot instance"
    echo "$output"
    return 1
  fi
  local instance_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_instance $instance_id $MAX_FAIL ; then
    nova show $instance_id
    nova delete $instance_id >/dev/null
    return 1
  fi
  echo "INFO: Instance created successfully"

  echo "INFO: Create image from Instance"
  if ! output=`nova image-create $instance_id snapshot_image` ; then
    echo "ERROR: Couldn't create image"
    echo "$output"
    nova delete $instance_id >/dev/null
    return 1
  fi
  # previous command doesn't return any output - get id from list
  local simage_id=`openstack image show snapshot_image | awk '/ id /{print $4}'`
  echo "INFO: Status should be 'queued' now. Waiting for 'saving'"
  if ! wait_image $simage_id $MAX_FAIL saving ; then
    openstack image show $simage_id
    openstack image delete $simage_id >/dev/null
    nova delete $instance_id >/dev/null
    return 1
  fi
  echo "INFO: Status should be 'saving' now. Waiting for 'active'"
  if ! wait_image $simage_id $((2*MAX_FAIL)) active ; then
    openstack image show $simage_id
    openstack image delete $simage_id >/dev/null
    nova delete $instance_id >/dev/null
    return 1
  fi
  echo "INFO: Image created successfully"

  echo "INFO: Create instance from created image"
  local iname="from_snapshot"
  if ! output=`nova boot --flavor 51 $nic_opts --image $simage_id $iname` ; then
    echo "ERROR: Couldn't boot instance from created image"
    echo "$output"
    openstack image delete $simage_id >/dev/null
    nova delete $instance_id >/dev/null
    return 1
  fi
  local instance_id2=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_instance $instance_id2 $((3*MAX_FAIL)) ; then
    nova show $instance_id2
    nova delete $instance_id2 >/dev/null
    openstack image delete $simage_id >/dev/null
    nova delete $instance_id >/dev/null
    return 1
  fi
  echo "INFO: Instance from new image created successfully"

  local new_volume_ids=`_get_volume_ids $volume_ids`
  for id in $new_volume_ids ; do
    _check_descendants $id 0 || ret=1
  done

  nova delete $instance_id2 >/dev/null
  openstack image delete $simage_id >/dev/null
  nova delete $instance_id >/dev/null

  return $ret
}

function check_instance_resize() {
  echo "INFO: Check resize from 'empty' flavor to flavor with set PD (volume must be recreated)"
  current_type=`$get_provisioning_type_callback`
  if [[ $current_type == 'thin' ]] ; then otype='thick' ; else otype='thin' ; fi
  nova flavor-key 52 set sio:pd_name=${pd_name} sio:provisioning_type=$otype

  local volume_ids=`_get_volume_ids`
  echo "INFO: Create instance"
  local iname="instance_03"
  if ! output=`nova boot --flavor 51 $nic_opts --image cirros $iname` ; then
    echo "ERROR: Couldn't boot instance"
    echo "$output"
    return 1
  fi
  local instance_id=`echo "$output" | awk '/ id /{print $4}'`
  if ! wait_instance $instance_id $MAX_FAIL ; then
    nova show $instance_id
    nova delete $instance_id >/dev/null
    return 1
  fi
  echo "INFO: Instance created successfully"
  local vol_id1=`_get_volume_ids $volume_ids` # should be only one
  local volume_ids=`_get_volume_ids`

  echo "INFO: Resizing instance"
  if ! output=`nova resize $instance_id 52` ; then
    echo "ERROR: Couldn't resize instance"
    echo "$output"
    nova show $instance_id
    nova delete $instance_id >/dev/null
    return 1
  fi
  echo "INFO: Waiting instance for resize-confirm"
  if ! wait_instance $instance_id $((2*MAX_FAIL)) VERIFY_RESIZE ; then
    nova show $instance_id
    nova delete $instance_id >/dev/null
    return 1
  fi
  if ! output=`nova resize-confirm $instance_id` ; then
    echo "ERROR: Couldn't confirm resize instance"
    echo "$output"
    nova show $instance_id
    nova delete $instance_id >/dev/null
    return 1
  fi
  if ! wait_instance $instance_id $MAX_FAIL ; then
    nova show $instance_id
    nova delete $instance_id >/dev/null
    return 1
  fi

  local new_ids=`_get_volume_ids $volume_ids`
  _check_provisioning_type $otype $new_ids || ret=1
  _check_size 16384 $new_ids || ret=1

  nova delete $instance_id >/dev/null
  return 0
}
