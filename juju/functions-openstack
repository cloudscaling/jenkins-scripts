#!/bin/bash

instance_status() { nova show $1 | awk '/ status / {print $4}'; }
function volume_status() { cinder show $1 | awk '/ status / {print $4}'; }
function snapshot_status() { cinder snapshot-show $1 | awk '/ status / {print $4}'; }
function image_status() { openstack image show $1 | awk '/ status / {print $4}'; }

function wait_instance() {
  local instance_id=$1
  local max_fail=$2
  local wait_status=${3:-ACTIVE}
  echo "------------------------------  Wait for status '$wait_status' of instance '$instance_id'"
  local fail=0
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Instance status wait timeout occured" >> errors
      nova show $instance_id >> errors
      return 0
    fi
    echo "attempt $fail of $max_fail"
    status=$(instance_status $instance_id)
    if [[ "$status" == "$wait_status" ]]; then
      break
    fi
    if [[ "$status" == "ERROR" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Instance booting error' >> errors
      nova show $instance_id >> errors
      return 0
    fi
    sleep 10
    ((++fail))
  done
}

function wait_volume() {
  local volume_id=$1
  local max_fail=$2
  echo "------------------------------  Wait for volume: $volume_id"
  local fail=0
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Volume creation fails (timeout)" >> errors
      cinder show $volume_id >> errors
      return
    fi
    echo "attempt $fail of $max_fail"
    status=$(volume_status $volume_id)
    if [[ $status == "available" ]]; then
      break
    fi
    if [[ $status == "error" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Volume creation error' >> errors
      cinder show $volume_id >> errors
      return
    fi
    sleep 10
    ((++fail))
  done
}

function wait_snapshot() {
  local snapshot_id=$1
  local max_fail=$2
  echo "----------------------------  Wait for snapshot: $volume_id"
  local fail=0
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Snapshot creation fails (timeout)" >> errors
      cinder snapshot-show $snapshot_id >> errors
      return
    fi
    echo "attempt $fail of $max_fail"
    status=$(snapshot_status $snapshot_id)
    if [[ $status == "available" ]]; then
      break
    fi
    if [[ $status == "error" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Snapshot creation error' >> errors
      cinder snapshot-show $snapshot_id >> errors
      return
    fi
    sleep 10
    ((++fail))
  done
}

function wait_image() {
  local image_id=$1
  local max_fail=$2
  local wait_status=$3
  echo "------------------------------  Waiting for image: $image_id"
  local fail=0
  while [[ true ]] ; do
    if ((fail >= max_fail)); then
      echo '' >> errors
      echo "ERROR: Image status wait timeout occured" >> errors
      openstack image show $image_id >> errors
      return 0
    fi
    echo "attempt $fail of $max_fail"
    status=$(image_status $image_id)
    if [[ "$status" == "$wait_status" || "$status" == 'active' ]]; then
      break
    fi
    if [[ "$status" == "error" || -z "$status" ]]; then
      echo '' >> errors
      echo 'ERROR: Image creation error' >> errors
      openstack image show $image_id >> errors
      return 0
    fi
    sleep 10
    ((++fail))
  done
}

function create_virtualenv() {
  rm -rf .venv
  virtualenv .venv
  source .venv/bin/activate
  pip install -q python-openstackclient
  deactivate
}

function create_image() {
  image_name=${1:-cirros}

  source .venv/bin/activate

  if ! image_id=`openstack image show $image_name | awk '/ id /{print $4}'` ; then
    rm -f cirros-0.3.4-x86_64-disk.img
    wget -t 2 -T 60 -nv http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
    openstack image create --public --file cirros-0.3.4-x86_64-disk.img $image_name
    image_id=`openstack image show $image_name | awk '/ id /{print $4}'`
  fi

  deactivate
  echo $image_id
}

function create_flavors() {
  source .venv/bin/activate

  if ! nova flavor-show 51 &>/dev/null ; then
    nova flavor-create fl8gb 51 512 8 1
  fi
  if ! nova flavor-show 52 &>/dev/null ; then
    nova flavor-create fl16gb 52 512 16 1
  fi
  if ! nova flavor-show 53 &>/dev/null ; then
    nova flavor-create fl8gbext --ephemeral 8 --swap 8192 53 512 8 1
  fi
  sleep 2

  deactivate
}

function create_network() {
  nova network-create --fixed-range-v4 10.0.0.0/24 --gateway 10.0.0.1 --bridge br100 private
}

function run_os_checks() {
  exec_on_mdm_callback=$1
  get_provisioning_type_callback=$2

  rm -f errors
  touch errors
  export MAX_FAIL=30

  scli_password=${SCALEIO_mdm_password:-'Default_password'}
  if [ -n "${SCALEIO_mdm_ips}" ] ; then
    mdm_opts="--mdm_ip ${SCALEIO_mdm_ips}"
  else
    mdm_opts=""
  fi
  scli_login="scli ${mdm_opts} --login --username admin --password ${scli_password} --approve_certificate"
  scli_query="${scli_login} && scli ${mdm_opts}"

  pd_name=${SCALEIO_PROTECTION_DOMAIN:-'default_protection_domain'}

  # check installed cloud
  source .venv/bin/activate

  openstack catalog list

  image_id=`create_image`

  echo "------------------------------  Add specific flavors"
  create_flavors

  echo "------------------------------  Check cinder volumes"
  echo "------------------------------  Check simple volume"
  cinder create --display_name simple_volume 1
  volume_id=`cinder list | grep " simple_volume " | awk '{print $2}'`
  wait_volume $volume_id $MAX_FAIL

  echo "------------------------------  Check cinder volumes"
  echo "------------------------------  Check volume from image"
  cinder create --image-id $image_id --display_name volume_from_image 1
  volume_id=`cinder list | grep " volume_from_image " | awk '{print $2}'`
  wait_volume $volume_id $MAX_FAIL

  cinder list

  echo "------------------------------  Run instance from bootable volume"
  # in fuel env tehre is more than 1 network, so it's needed to specify network directly
  net_id=`nova network-list | awk '/admin_internal_net/ {print($2)}'`
  if [ -n "${net_id}" ] ; then
    nic_opts="--nic net-id=$net_id"
  else
    nic_opts=""
  fi
  iname='inst_from_volume'
  nova boot --flavor 51 $nic_opts --block-device "device=/dev/vda,id=$volume_id,shutdown=remove,source=volume,dest=volume,bootindex=0" $iname
  instance_id=`nova list | grep " $iname " | awk '{print $2}'`
  wait_instance $instance_id $MAX_FAIL
  nova show $iname
  echo "------------------------------  Console log"
  nova console-log $iname | tail -10
  echo "------------------------------  Check live migration"
  nova live-migration $iname
  sleep 20
  wait_instance $instance_id $MAX_FAIL
  nova show $iname
  host2=`nova show $iname | grep "$host_attr" | awk '{print $4}'`
  if [[ "$host1" == "$host2" ]] ; then
    echo '' >> errors
    echo "ERROR: Host is not changed after live migration." >> errors
  fi

  echo "------------------------------  Run instance from ephemeral"
  iname="instance_01"
  nova boot --flavor 51 $nic_opts --image cirros $iname
  instance_id=`nova list | grep " $iname " | awk '{print $2}'`
  wait_instance $instance_id $MAX_FAIL
  nova show $iname
  host_attr='OS-EXT-SRV-ATTR:host'
  host1=`nova show $iname | grep "$host_attr" | awk '{print $4}'`
  echo "------------------------------  Console log"
  nova console-log $iname | tail
  echo "------------------------------  Check live migration"
  nova live-migration $iname
  sleep 20
  wait_instance $instance_id $MAX_FAIL
  nova show $iname
  host2=`nova show $iname | grep "$host_attr" | awk '{print $4}'`
  if [[ "$host1" == "$host2" ]] ; then
    echo '' >> errors
    echo "ERROR: Host is not changed after live migration." >> errors
  fi

  echo "------------------------------  Check flavor with additional Ephemeral and swap "
  iname="instance_02"
  nova boot --flavor 53 $nic_opts --image cirros $iname
  instance_id=`nova list | grep " $iname " | awk '{print $2}'`
  wait_instance $instance_id $((3*MAX_FAIL))
  nova show $iname

  # check existing volumes type
  current_type=`${get_provisioning_type_callback}`
  echo "------------------------------ Check that all volumes in ScaleIO has type: $current_type"
  volumes=`${exec_on_mdm_callback} "${scli_query} --query_all_volume" 2>/dev/null | grep 'Volume ID:'`
  vcount=`echo "$volumes" | wc -l`
  vtcount=`echo "$volumes" | grep -i "$current_type\-provisioned" | wc -l`
  if [[ $vcount != $vtcount ]] ; then
    echo "------------------------------ ERROR: Some volume has another type"
    echo '' >> errors
    echo "ERROR: Some volumes has different type" >> errors
    echo "$volumes" >> errors
  else
    echo "------------------------------ All volumes in ScaleIO has type: $current_type"
  fi

  # remove OpenStack objects
  cinder delete simple_volume || /bin/true
  nova delete inst_from_volume || /bin/true
  nova delete instance_01 || /bin/true
  nova delete instance_02 || /bin/true

  # check snapshots
  echo "------------------------------  Creating volume"
  cinder create --display_name volume_for_snaps 1
  volume_id=`cinder list | grep " volume_for_snaps " | awk '{print $2}'`
  wait_volume $volume_id $MAX_FAIL

  echo "------------------------------  Creating snapshot"
  cinder snapshot-create volume_for_snaps
  snapshot_id=`cinder snapshot-list | grep $volume_id | awk '{print$2}'`
  wait_snapshot $snapshot_id $MAX_FAIL

  echo "------------------------------  Creating volume from snapshot"
  cinder create --snapshot_id $snapshot_id --name from_snapshot
  snap_volume_id=`cinder list | grep " from_snapshot " | awk '{print $2}'`
  wait_volume $snap_volume_id $MAX_FAIL

  cinder delete $snap_volume_id
  echo "------------------------------ Deleting snapshot"
  cinder snapshot-delete $snapshot_id
  sleep 5
  if `cinder snapshot-list | grep $snapshot_id ` ; then
    echo '' >> errors
    echo "Snapshot $snapshot_id wasn't deleted." >> errors
  fi
  cinder delete $volume_id

  echo "------------------------------  Checking creation of snapshot from instance and second instance from the created image"
  echo "------------------------------  Creating instance"
  iname="instance_for_snaps"
  nova boot --flavor 51 $nic_opts --image cirros $iname
  instance_id=`nova list | grep " $iname " | awk '{print $2}'`
  wait_instance $instance_id $MAX_FAIL

  echo "------------------------------  Creating Image from Instance"
  nova image-create $instance_id snapshot_image
  simage_id=`openstack image show snapshot_image | grep " id " | awk '{print $4}'`
  openstack image show $simage_id
  echo "------------------------------  Status should be 'queued' now. Waiting for 'saving'"
  wait_image $simage_id $MAX_FAIL saving
  echo "------------------------------  Status should be 'saving' now. Waiting for 'active'"
  wait_image $simage_id $((2*MAX_FAIL)) active
  openstack image show $simage_id

  echo "------------------------------  Creating instance from created image"
  iname="from_snapshot"
  nova boot --flavor 51 $nic_opts --image $simage_id $iname
  instance_id=`nova list | grep " $iname " | awk '{print $2}'`
  wait_instance $instance_id $((3*MAX_FAIL))

  echo "------------------------------  Deleting artefacts"
  nova delete from_snapshot
  sleep 5
  openstack image delete $simage_id
  sleep 5
  if `openstack image list | grep $simage_id ` ; then
    echo '' >> errors
    echo "Snapshot wasn't deleted." >> errors
  fi
  nova delete instance_for_snaps

  echo "------------------------------  Checking resize from 'empty' flavor to flavor with set PD (resize to another host)"
  if [[ $current_type == 'thin' ]] ; then otype='thick' ; else otype='thin' ; fi
  nova flavor-key 52 set sio:pd_name=${pd_name} sio:provisioning_type=$otype

  echo "------------------------------  Creating instance"
  iname="instance_for_resize"
  nova boot --flavor 51 $nic_opts --image cirros $iname
  instance_id=`nova list | grep " $iname " | awk '{print $2}'`
  wait_instance $instance_id $MAX_FAIL
  $exec_on_mdm_callback "$scli_query --query_all_volume" 2>/dev/null
  echo "------------------------------  Resizing instance"
  nova resize $instance_id 52
  echo "------------------------------  Wating instance for resize-confirm"
  wait_instance $instance_id $((2*MAX_FAIL)) VERIFY_RESIZE
  nova resize-confirm $instance_id
  wait_instance $instance_id $MAX_FAIL
  echo "------------------------------  Volume list after resize"
  sleep 10
  ${exec_on_mdm_callback} "${scli_query} --query_all_volume" 2>/dev/null
  # TODO: add checking that new volume was created and has different provisioning type
  nova delete $iname
  sleep 5

  # all checks is done and we can switch off traps
  set +e

  # here we try to list all infos from ScaleIO
  set -x
  ${exec_on_mdm_callback} "${scli_query} --query_all_volume" 2>/dev/null
  ${exec_on_mdm_callback} "${scli_query} --query_all_sds" 2>/dev/null
  ${exec_on_mdm_callback} "${scli_query} --query_all_sdc" 2>/dev/null
  ${exec_on_mdm_callback} "${scli_query} --query_performance_parameters --all_sds --all_sdc" 2>/dev/null
  nova list
  cinder list
  set +x

  deactivate

  if [ -s errors ] ; then
    cat errors
    return 1
  fi
}
