#!/bin/bash -eux

my_file="$(readlink -e "$0")"
my_dir="$(dirname $my_file)"

source $my_dir/../functions
source $my_dir/../scaleio/static-checks

# cdir is equal to evn variable WORKSPACE in jenkins and us not equal to my_dir
cdir="$(pwd)"
cd fuel-charms

cloud=${1:-"ec2"}
if [[ "${cloud}" == "gce" ]]; then
    instance_type="n1-standard-1"
    device_paths="/var/scaleio_disk"
else
    instance_type="i2.xlarge"
    device_paths="/dev/xvdb"
fi
machines=()
deploy_counter=1

trap 'catch_errors $LINENO' ERR

function provision_machines() {
    local new_mx=()
    echo "Provision machines: $*"
    while (( "$#" )); do
        local mx=$(juju add-machine --constraints "instance-type=${instance_type}" 2>&1 | awk '{print $3}')
        echo "Machine $1 created: $mx"
        machines[$1]=${mx}
        new_mx+=(${mx})
        shift
    done

    # wait for machines up
    wait_for_machines ${new_mx[@]}
    
    # if not EC2:
    #       - prepare device for SDS (truncated file)
    #       - patch host name - in GCE hostname is too long, e.g. juju-023fae94-ef89-4b6d-8681-d9e462c7fae3-machine-2
    if [[ "${cloud}" == "gce" ]]; then
        for i in ${new_mx[@]}; do
            paths=$(echo ${device_paths} | sed 's/,/ /g')
            juju ssh $i "for p in ${paths}; do sudo rm -f \$p && sudo truncate --size 100G \$p; done" 2>/dev/null
            juju ssh $i "sudo sed -i 's/\(juju-\)\(.*\)\(machine.*\)/\1\3/g' /etc/hostname && sudo hostname -F /etc/hostname" 2>/dev/null
        done
    fi
    
    # check kernel at one machine
    rm -f index.html
    wget -nv "--ftp-user=QNzgdxXix" "--ftp-password=Aw3wFAwAq3" ftp://ftp.emc.com/Ubuntu/2.0.5014.0/
    kernel=`juju ssh ${new_mx[0]} "uname -r" 2>/dev/null`
    kernel=`echo $kernel | sed 's/\r//'`
    if ! cat index.html | grep $kernel ; then
      echo "WARNING: driver for kernel $kernel not found on ftp.emc.com. Upgrade kernel to 4.2.0-30"
    
      # change kernel and reboot
      for m in ${new_mx[@]} ; do
        echo "--- Updating machine $m"
        juju ssh $m "sudo apt-get install -fy linux-image-4.2.0-30-generic linux-headers-4.2.0-30-generic &>/dev/null" 2>/dev/null
        juju ssh $m "sudo reboot" 2>/dev/null
      done
    
      # wait for machines up
      wait_for_machines ${new_mx[@]}
    fi
    rm -f index.html
    
    # deploy fake module to avoid removal of machines in case of remove last service
    for i in ${new_mx[@]}; do
        juju deploy ubuntu fuel-null-service${i} --to ${i}
    done    
}

function copy_log() {
    mch=$1
    log=$2
    dst=$3
    if juju ssh $mch "test -f $log" ; then
        juju ssh $mch "cat $log" > "$dst" 2>/dev/null
    fi
}

function save_logs() {
    # save status to file
    for mch in ${machines[@]:1} ; do
        name=fuel-node${mch}
        if juju service get ${name} ; then
            mdir="$cdir/logs/$mch"
            mkdir -p "$mdir"
            copy_log $mch '/var/log/fuel-puppet-scaleio.log' "$mdir/fuel-puppet-scaleio.log"
            copy_log $mch '/var/lib/hiera/defaults.yaml' "$mdir/var-lib-hiera-defaults.log"
        fi
    done
}

function catch_errors() {
    local exit_code=$?
    echo "Line: $1  Error=$exit_code  Command: '$BASH_COMMAND'"
    trap - ERR
    save_logs
    exit $exit_code
}

function remove_node_service() {
    echo Remove service from machines $@
    while (( "$#" )); do
        mch=${machines[$1]}
        name=fuel-node${mch}
        echo Remove EMC packages from from machine $1/${mch}
        juju ssh $mch 'sudo apt-get purge -yf emc-scaleio-*'
        echo Remove service ${name} from machine $1/${mch}
        juju remove-service ${name}
        shift
    done    
 }

function prepare_fuel_master() {
    mch=${machines[$1]}
    juju deploy local:trusty/fuel-master --to ${mch}
    juju set fuel-master device-paths=${device_paths}
}

function set_fuel_options() {
    juju set fuel-master $*
}

function deploy_node_service() {
    mch=${machines[$1]}
    name=fuel-node${mch}
    roles=$2
    if ! juju service get ${name} ; then
        juju deploy local:trusty/fuel-node $name --to $mch
        juju add-relation fuel-master $name
    fi
    juju set $name roles="${roles}"
 }

function configure_cluster() {
    mdms=""
    while (( "$#" )); do
        case "$1" in
            "compute")
                shift
                for i in `echo $1 | sed 's/,/ /g'`; do
                    deploy_node_service $i "compute"
                done
            ;;
            "primary-controller")
                shift
                deploy_node_service $1 "primary-controller cinder"
                mdms+=" ${machines[$1]}"
            ;;
            "controller")
                shift
                for i in `echo $1 | sed 's/,/ /g'`; do
                    deploy_node_service $i "controller cinder"
                    mdms+=" ${machines[$i]}"
                done
            ;;
            "mode")
                shift
                mode=$1
            ;;
        esac
        shift
    done

    sleep 15
    
    echo "Wait for services start: $(date)"
    wait_absence_status_for_services "executing|blocked|waiting|allocating"
    echo "Wait for services end: $(date)"

    juju set fuel-master deploy=$deploy_counter
    ((deploy_counter++))
    sleep 30
    
    echo "Wait for services start: $(date)"
    wait_absence_status_for_services "maintenance"
    echo "Wait for services end: $(date)"
    
    # check query_cluster output before exit on error if exists
    master_mdm=`get_master_mdm "echo ${mdms}"`
    echo "INFO: query cluster on machine $master_mdm"
    juju ssh $master_mdm 'scli --query_cluster --approve_certificate' 2>/dev/null
    
    # check for errors
    if juju status | grep "current" | grep error ; then
      echo "ERROR: Some services went to error state"
      juju ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
      exit 1
    fi
    
    check-cluster "juju ssh" $master_mdm $mode
}

#TODO: remove duplication of code: re-use the check functions from common code when it appears
function check_storage_pool {
    local mch=${machines[$1]}
    local key_to_check=$2
    local expected_value=$3
    
    local sp=`config-get storage-pools`
    local pd=`config-get protection-domain`
    local username='admin'
    local password=`config-get password`
    
    local login_cmd="scli --login --username $username --password $password --approve_certificate"
    local query_cmd="scli --query_storage_pool --protection_domain_name $pd --storage_pool_name $sp"
    juju ssh $mch "$login_cmd && $query_cmd" | grep "$key_to_check" | grep -q "$expected_value"
    echo "INFO: Success. Parameter $key_to_check is $expected_value."
}

